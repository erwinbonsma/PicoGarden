pico-8 cartridge // http://www.pico-8.com
version 35
__lua__
-- pico garden
-- a slow-play screensaver game
-- (c) 2022 eriban

max_cellfind_attempts=32
num_decay_death_ticks=16
mutate_prob=1/512
history_len=80
liveliness_limit=50
max_wait=6
min_revive_delay=10
cart_version=2

-- colors so that:
-- - intensity increases with
--   amount of live cells
-- - the blended colors follow
--   from the core layer colors
--   (as much as possible)
display_palette={
 1,2,14,4,3,9,8,5,
 13,6,12,15,11,10,7,0
}

-- colors after display-pallete
-- modification
c_red=7
c_dgreen=5
c_lgreen=13
c_lgray=10
c_brown=4
c_dblue=1
c_dgray=8

bit0=0x0.0001

dirs={
 {dx=1,dy=0},
 {dx=0,dy=1},
 {dx=-1,dy=0},
 {dx=0,dy=-1},
}

function count_bits(val)
 assert(val==flr(val))
 local nbits=0
 while val!=0 do
  if val&0x1==0x1 then
   nbits+=1
   val&=~0x1
  end
  val>>>=1
 end

 return nbits
end

-- code by felice. see
-- https://www.lexaloffle.com/bbs/?pid=22809
function u32_tostr(v)
 local s=""
 repeat
  local t=v>>>1
  s=(t%0x0.0005<<17)+(v<<16&1)..s
  v=t/5
 until v==0
 return s
end

function cprint(str,y)
 print(str,64-#str*2,y)
end

function rprint(str,x,y)
 print(str,x-#str*4,y)
end

-- returns list of numbers
-- 0..n-1 in random order
function shuffled(n)
 local l={}
 -- populate list
 for i=0,n-1 do
  add(l,i)
 end
 -- shuffle
 for i=1,n do
  local idx=i+flr(rnd(n-i+1))
  local tmp=l[i]
  l[i]=l[idx]
  l[idx]=tmp
 end
 return l
end

flower={}

function flower:new()
 local o=setmetatable({},self)
 self.__index=self

 o.colors=shuffled(4)
 o.sprites=shuffled(11)
 o.frame=0
 o.grow_count=flr(rnd(90))

 return o
end

function flower:update()
 if rnd(256)<128 then
  self.grow_count+=1
  if self.grow_count%90==0 then
   self.frame+=1
  end
 end
end

function flower:draw(x,y)
 for i=1,min(3,self.frame) do
  local s=self.sprites[
   (self.frame-i)%11+1
  ]
  local si=64+(s%8)*2+(s\8)*32
  pal(7,1<<self.colors[
   (self.frame-i)%4+1
  ],0)
  spr(si,x,y,2,2)
 end
 pal(0)
end

-- 3x17=51 bytes
mem_cagrid_work=0x8000

-- bits per unit: the number of
-- bits stored per memory unit
-- in bit_grid
bpu=32

-- bits per unit in ca
bpu_ca=bpu-1

bitgrid={}
function bitgrid:new(
 address,width,height
)
 local o=setmetatable({},self)
 self.__index=self

 o.a0=address
 o.w=width
 o.h=height

 local x_bits=o.w%bpu
 local bits_per_row=o.w
 if x_bits>0 then
  bits_per_row+=bpu-x_bits
 end
 --units per row
 o.upr=bits_per_row\bpu
 
 return o
end

function bitgrid:_address(x,y)
 return self.a0+4*(
  x\bpu+y*self.upr
 )
end

function bitgrid:get(x,y)
 local a=self:_address(x,y)
 return (
  ($a>>>(x%bpu))&bit0
 )==bit0
end

function bitgrid:set(x,y)
 local a=self:_address(x,y)
 poke4(a,$a|(bit0<<(x%bpu)))
end

function bitgrid:clr(x,y)
 local a=self:_address(x,y)
 poke4(a,$a&~(bit0<<(x%bpu)))
end

function bitgrid:reset()
 memset(
  self.a0,0,self.h*self.upr*4
 )
end

function bitgrid:randomize()
 local a=self.a0
 local n=self.h*self.upr*4
 for i=1,n do
  poke(a,
   flr(rnd(256))&flr(rnd(256))
  )
  a+=1
 end
end

ca_specs={}
function ca_specs:new(
 width,height,wraps
)
 local o=setmetatable({},self)
 self.__index=self

 o.w=width
 o.h=height
 o.wraps=wraps

 -- units per row
 o.upr=width\bpu_ca+1
 -- bytes per row
 o.bpr=4*o.upr

 -- bit grid dimensions. it is
 -- larger due to border and
 -- duplicate bit at unit
 -- boundary
 o.bg_w=o.upr*bpu
 o.bg_h=height+2

 -- masks with valid bits
 local mask_c=~(bit0<<bpu_ca)
 local mask_l=mask_c&~bit0
 local mask_r=mask_c
 if (ca.upr==1) mask_r=mask_l

 -- #bits in last unit
 local nblu=width%bpu_ca+1
 if nblu<bpu then
  mask_r&=~0>>>(bpu-nblu)
 end

 o.mask_c=mask_c
 o.mask_r=mask_r
 o.mask_l=mask_l

 return o
end

ca={}
ca_rows=0x4300
function ca:new(address,specs)
 local o=setmetatable({},self)
 self.__index=self

 o.specs=specs
 o.bitgrid=bitgrid:new(
  address,specs.bg_w,specs.bg_h
 )

 return o
end

function ca:reset()
 self.steps=0
 self.bitgrid:reset()
end

function ca:randomize()
 self.bitgrid:randomize()
end

function ca:_set_zeroes_border()
 local bg=self.bitgrid
 local specs=self.specs

 -- top row
 memset(bg.a0,0,specs.bpr)
 -- bottom row
 memset(
  bg.a0+(bg.h-1)*specs.bpr,
  0,specs.bpr
 )
 -- left/right columns
 local bitmask_l=~bit0
 local bitmask_r=~(
  bit0<<((specs.w+1)%bpu_ca)
 )
 local a=bg.a0+specs.bpr
 for i=1,specs.h do
  poke4(a,$a&bitmask_l)
  a+=specs.bpr-4
  poke4(a,$a&bitmask_r)
  a+=4
 end
end

function ca:_set_wrapping_border()
 local bg=self.bitgrid
 local specs=self.specs

 -- left and right colums
 local sh_l_dst=0
 local sh_l_src=1
 local sh_r_dst=specs.w%bpu_ca+1
 local sh_r_src=sh_r_dst-1
 local al=bg.a0+specs.bpr
 local ar=bg.a0+specs.bpr*2-4
 for i=1,specs.h do
  -- clear old bit
  poke4(
   al,$al&~(bit0<<sh_l_dst)
  )
  poke4(
   ar,$ar&~(bit0<<sh_r_dst)
  )

  -- copy wrapped bit
  poke4(
   al,
   $al|(($ar&(bit0<<sh_r_src))
        >>>(sh_r_src-sh_l_dst))
  )
  poke4(
   ar,
   $ar|(($al&(bit0<<sh_l_src))
        <<(sh_r_dst-sh_l_src))
  )

  al+=specs.bpr
  ar+=specs.bpr
 end

 -- top row
 memcpy(
  bg.a0,
  bg.a0+(bg.h-2)*specs.bpr,
  specs.bpr
 )
 -- bottom row
 memcpy(
  bg.a0+(bg.h-1)*specs.bpr,
  bg.a0+specs.bpr,
  specs.bpr
 )
end

function ca:_set_border()
 if self.specs.wraps then
  self:_set_wrapping_border()
 else
  self:_set_zeroes_border()
 end
end

function ca:_restore_right_bits()
 local bg=self.bitgrid
 local specs=self.specs

 local a=bg.a0+specs.bpr
 local a_max=a+specs.bpr*specs.h
 local mask=~(bit0<<bpu_ca)
 while a<a_max do
  -- clear bit
  local v=$a&mask
  -- copy value from next unit
  v|=($(a+4)&bit0)<<bpu_ca
  poke4(a,v)
  a+=4
 end
end

function ca:step()
 local bg=self.bitgrid
 local specs=self.specs

 local r0=ca_rows
 local r1=r0+specs.bpr
 local r2=r1+specs.bpr

 self:_restore_right_bits()
 self:_set_border()

 local a=bg.a0
 -- init row #0 and row #1
 memcpy(r0,a,specs.bpr*2)

 a+=specs.bpr
 for row=1,specs.h do
  -- init row #2
  memcpy(
   r2,a+specs.bpr,specs.bpr
  )

  local abc_sum_prev=0
  local abc_car_prev=0

  for col=0,specs.bpr-1,4 do
   local above=$(r0+col)
   local below=$(r2+col)
   local currn=$(r1+col)

   -- above + below
   local ab_sum=above^^below
   local ab_car=above&below

   -- above + below + current
   local abc_sum=currn^^ab_sum
   local abc_car=currn&ab_sum|ab_car

   -- sum of bit0 (sum of sums)
   local l=abc_sum<<1
    |abc_sum_prev>>>(bpu_ca-1)
   local r=abc_sum>>>1
   local lr=l^^r
   local sum0=lr^^ab_sum
   local car0=l&r|lr&ab_sum

   -- sum of bit1 (sum of carry's)
   l=abc_car<<1
    |abc_car_prev>>>(bpu_ca-1)
   r=abc_car>>>1
   lr=l^^r
   local sum1=lr^^ab_car
   local car1=l&r|lr&ab_car

   poke4(a,
    (currn|sum0)
    &(car0^^sum1)
    &~car1
   )
   a+=4

   abc_sum_prev=abc_sum
   abc_car_prev=abc_car
  end

  local rtmp=r0
  r0=r1
  r1=r2
  r2=rtmp
 end
end

function ca:draw(layer_idx)
 local d0=0x6000+12+64*32
 local bg=self.bitgrid
 for y=0,63 do
  local d=d0+y*64
  local rb=80
  local a
   =bg.a0+(y+1)*self.specs.bpr
  local rbpu=bpu_ca-1
  while rb>0 do
   local v
   local nb=min(rbpu,rb)
   if rbpu>=8 then
    v=(
     $a>>>(bpu_ca-rbpu)
    )&0x0.00ff
    rbpu-=8
   else
    v=(
     $a&0x7fff.ffff
    )>>>(bpu_ca-rbpu)
    a+=4
    v|=($a<<rbpu)&0x0.00ff
    rbpu=bpu_ca-(8-rbpu)
   end
   rb-=8
   v<<=16
   poke4(d,$d|(
    expand[v]<<(layer_idx-1)
   ))
   d+=4
  end
 end
end

function ca:_address(x,y)
 return (
  self.bitgrid.a0
  +4*((x+1)\bpu_ca)
  +self.specs.bpr*(y+1)
 )
end

function ca:get(x,y)
 return (
  $(self:_address(x,y))
  >>((x+1)%bpu_ca)
 )&bit0==bit0
end

function ca:clr(x,y)
 local a=self:_address(x,y)
 poke4(
  a,$a&~(bit0<<((x+1)%bpu_ca))
 )
end

function ca:set(x,y)
 local a=self:_address(x,y)
 poke4(
  a,$a|(bit0<<((x+1)%bpu_ca))
 )
end

-->8
bitcounter={}

function bitcounter:new()
 local o=setmetatable({},self)
 self.__index=self

 o.lookup={}
 for i=0,255 do
  o.lookup[i]=count_bits(i)
 end

 return o
end

function bitcounter:count_bits(
 bg
)
 local nbits=0
 local a=bg.a0
 local amax=a+bg.h*bg.upr*4
 local lookup=self.lookup

 while a<amax do
  nbits+=lookup[@a]
  a+=1
 end

 return nbits
end

function bitcounter:count_ca_bits(
 ca,bg
)
 local specs=ca.specs

 if bg==nil then
  bg=ca.bitgrid
 else
  assert(specs.bg_w==bg.w)
  assert(specs.bg_h==bg.h)
 end

 local nbits=0
 local i=0
 local a=bg.a0+specs.bpr
 local amax=a+specs.h*specs.bpr
 local lookup=self.lookup
 while a<amax do
  local v
  if i==0 then
   v=$a&specs.mask_l
   i=1
  elseif i==specs.upr-1 then
   v=$a&specs.mask_r
   i=0
  else
   v=$a&specs.mask_c
   i+=1
  end

  nbits+=lookup[v&0xff]
  nbits+=lookup[(v>>>8)&0xff]
  nbits+=lookup[(v<<8)&0xff]
  nbits+=lookup[(v<<16)&0xff]

  a+=4
 end

 return nbits
end

cellhistory={}

function cellhistory:new()
 local o=setmetatable({},self)
 self.__index=self

 o.counter=bitcounter:new()

 return o
end

function cellhistory:reset()
 self.counts={}
 for i=1,#state.gols do
  self.counts[i]={}
 end

 self.idx=history_len-1
 self:count()
 self.wrapped=false
end

function cellhistory:num_cells(
 layer_idx
)
 return self.counts[layer_idx][self.idx]
end

function cellhistory:total_cells()
 local total=0
 for i=1,#state.gols do
  total+=self.counts[i][self.idx]
 end
 return total
end

function cellhistory:num_empty()
 local num_empty=0
 for i=1,#state.gols do
  if self.counts[i][self.idx]==0
  then
   num_empty+=1
  end
 end
 return num_empty
end

function cellhistory:count()
 self.idx+=1
 if self.idx==history_len then
  self.idx=0
  self.wrapped=true
 end

 local total=0
 for i,g in pairs(state.gols) do
  local ncells=
	  self.counter:count_ca_bits(g)
  self.counts[i][self.idx]=ncells
  total+=ncells
 end

 return total
end

function cellhistory:draw_plot()
 rectfill(24,32,103,95,0)

 local idx0=0
 local np=self.idx
 if self.wrapped then
  idx0=(self.idx+1)%history_len
  np=history_len
 end

 for i,h in pairs(self.counts) do
  local c=0x1<<(i-1)
  for j=0,np-1 do
   local v=h[(idx0+j)%history_len]
   -- use a log-like scale for
   -- the y-axis based on:
   -- y=x*(x+1)/(2*1.6)
   -- the factor 1.6 scales the
   -- axis. fv is obtained from
   -- quadratic formula
   local fv=sqrt(0.25+2*v*1.6)
   local y=95-max(0,min(63,fv-2))
   local x=24+j
   pset(x,y,pget(x,y)|c)
  end
 end
end

cellfind={}

function cellfind:new(target_idx)
 local o=setmetatable({},self)
 self.__index=self

 o.target_idx=target_idx

 return o
end

function cellfind:find_target(ca)
 local specs=ca.specs
 for i=1,max_cellfind_attempts do
  local x=flr(rnd(specs.w))
  local y=flr(rnd(specs.h))

  if ca:get(x,y) then
   --printh("found target on attempt "
   -- ..i)
   self.pos={x=x,y=y}
   return true
  end
 end
 --printh("did not find target")
end

function cellfind:update(cas)
 if self.pos==nil then
  self:find_target(
   cas[self.target_idx]
  )
 end
end

decay=cellfind:new()

function decay:find_target(ca)
 if cellfind.find_target(
  self,ca
 ) then
  self.count=1
  self.mask=0xf
  return true
 end
end

function decay:clear_area(ca)
 local specs=ca.specs
 local pos=self.pos
 for x=pos.x-1,pos.x+1 do
  for y=pos.y-1,pos.y+1 do
   ca:clr(
    (x+specs.w)%specs.w,
    (y+specs.h)%specs.h
   )
  end
 end
end

function decay:destroy(cas)
 sfx(0)

 local ti=self.target_idx
 for i=1,4 do
  if (
   -- always clear target
   i==ti
   or (
    -- also clear static cells
    -- in other layers
    self.mask&(1<<(i-1))!=0
    and (
     -- as long as layer is
     -- is a direct neighbour
     i%2!=ti%2
     -- or connected via a
     -- static layer
     or count_bits(self.mask)>2
    )
   )
  ) then
   self:clear_area(cas[i])
  end
 end
 self.pos=nil
end

function decay:update(cas)
 cellfind.update(self,cas)
 if (self.pos==nil) return

 for i,ca in pairs(cas) do
  if not ca:get(
   self.pos.x,self.pos.y
  ) then
   self.mask&=~(1<<(i-1))
  end
 end

 if self.mask&(
  1<<(self.target_idx-1)
 )!=0 then
  self.count+=1
  if self.count==num_decay_death_ticks then
   printh("decay at layer "
    ..self.target_idx)
   self:destroy(cas)
  end
 else
  --printh("target changed after "
  -- ..self.count.." steps")
  self.pos=nil
 end
end

mutator=cellfind:new()

-- spawn a random neighbour cell
function mutator:mutate(ca)
 local offset=flr(rnd(#dirs))
 for i=1,4 do
  local dir=dirs[
   1+(i+offset)%#dirs
  ]
  local x=(
   self.pos.x+dir.dx+ca.specs.w
  )%ca.specs.w
  local y=(
   self.pos.y+dir.dy+ca.specs.h
  )%ca.specs.h
  if not ca:get(x,y) then
   ca:set(x,y)
   return
  end
 end
end

function mutator:update(cas)
 if rnd(1)<mutate_prob then
  self.do_mutate=true
 end
 if (not self.do_mutate) return

 cellfind.update(self,cas)

 if self.pos!=nil then
  printh("mutate at layer "
   ..self.target_idx)
  self:mutate(
   cas[self.target_idx]
  )
  self.do_mutate=false
  self.pos=nil
 end
end

liveliness_check={}

function liveliness_check:new(
 idx
)
 local o=setmetatable({},self)
 self.__index=self

 o.idx=idx
 o.min=9999

 return o
end

function liveliness_check
 :update(num_cells)

 if num_cells<self.min then
  self.min=num_cells
  return
 end

 if num_cells>
  self.min+liveliness_limit then
  sfx(self.idx)
  self.min=num_cells
 end
end

function revive(cas)
 local specs=cas[1].specs

 local a={}
 for ca in all(cas) do
  add(a,ca.bitgrid.a0+specs.bpr)
 end

 for row=1,specs.h do
  for col=0,specs.bpr-1,4 do
   local m=(
    $a[1]&$a[2]|$a[2]&$a[3]|
    $a[3]&$a[4]|$a[4]&$a[1]
   )
   for i=1,#cas do
    poke4(a[i],$a[i]|m)
    a[i]+=4
   end
  end
 end
end
-->8
function init_expand()
 local expand={}

 for i=0,255 do
  local x=i>>16
  x=(x|x<<12)&0x000f.000f
  x=(x|x<< 6)&0x0303.0303
  x=(x|x<< 3)&0x1111.1111
  expand[i]=x
 end

 return expand
end

function init_flash()
 local flash={}

 for i=0,255 do
  local v=i
  if (i&0xf0==0) v|=0x50
  if (i&0x0f==0) v|=0x05
  flash[i]=v
 end

 return flash
end

function show_loscore()
 local autoplay=max(
  state.num_revives,1
 )
 return (
  autoplay
  and state.loscore<
      state.hiscore[autoplay]
 )
end

function show_hiscore()
 local autoplay=max(
  state.num_revives,1
 )
 return (
  not autoplay
  or state.hiscore[autoplay]!=
     state.loscore
 )
end

function load_hiscores()
 if dget(0)!=cart_version then
  -- old (or no) cartdata
  dset(0,cart_version)
  if dget(0)==1 then
   --inserted auto-play hiscore
   --at index #1
   dset(3,dget(2))
   dset(2,dget(1))
   dset(1,0)
  else
   dset(1,0)
   dset(2,0)
   dset(3,0)
  end
 end

 state.hiscore={}
 state.hiscore[0]=dget(1)
 state.hiscore[1]=dget(2)
 state.loscore=dget(3)

 if state.loscore==0 then
  state.loscore=0x7fff.ffff
 end
end

function reset_garden()
 local specs=ca_specs:new(
  80,64,true
 )

 state.gols={}
 state.decays={}
 state.mutators={}
 state.liveliness_checks={}
 for i=1,4 do
  local gol=ca:new(
   0x4400+i*16*64,specs
  )
  gol:randomize()
  if false then
   gol:reset()
   gol:set(1,0)
   gol:set(2,1)
   gol:set(0,2)
   gol:set(1,2)
   gol:set(2,2)
  end

  add(state.gols,gol)
  add(state.decays,decay:new(i))
  add(
   state.mutators,
   mutator:new(i)
  )
  add(
   state.liveliness_checks,
   liveliness_check:new(i)
  )
 end
 state.ini_steps=10
end

function start_game()
 state.t=0
 state.steps=0
 state.biomass_sum=0
 state.viewmode=5
 state.revive_wait=0
 state.num_revives=0
 state.btnx_hold=0
 state.fadein=32
 state.flash_bg=0
 state.history:reset()

 _draw=main_draw
 _update=main_update
end

function init_flowers(n)
 local flowers={}
 for i=1,14 do
  add(flowers,flower:new())
 end
 return flowers
end

function _init()
 cartdata("eriban_picogarden")

 state={}
 state.wait=5

 load_hiscores()

 state.flash_bg=0

 expand=init_expand()
 flash=init_flash()
 state.flowers=init_flowers(14)

 state.history=cellhistory:new()

 pal(display_palette,1)

 state.flowers=init_flowers(14)
 show_title()
 --show_label()
end

function draw_border()
 local d0=0x6000
 local a=d0+64*32
 for y=32,95 do
  memcpy(a,a+40,12)
  memcpy(a+52,a+12,12)
  a+=64
 end

 if state.flash_bg>0 then
  for y=32,95 do
   local a=d0+y*64
   local b=a+52
   for x=1,12 do
    poke(a,flash[@a])
    poke(b,flash[@b])
    a+=1
    b+=1
   end
  end
 end

 local a=d0
 local b=d0+64*96
 local d=64*64
 for y=0,31 do
  memcpy(a,a+d,64)
  memcpy(b,b-d,64)
  a+=64
  b+=64
 end

 if state.flash_bg>0 then
  for y=0,31 do
   local a=d0+y*64+12
   local b=a+96*64
   for x=1,40 do
    poke(a,flash[@a])
    poke(b,flash[@b])
    a+=1
    b+=1
   end
  end
 end
end

function draw_garden()
 for i,g in pairs(state.gols) do
  g:draw(i)
 end
end

function main_draw()
 cls()

 if state.viewmode%5==0 then
  draw_garden()
 else
  state.gols[state.viewmode]
   :draw(state.viewmode)
 end
 draw_border()
 if state.viewmode==0 then
  state.history:draw_plot()
 elseif state.fadein>0 then
  rectfill(
   56-state.fadein,
   64-state.fadein,
   72+state.fadein,
   64+state.fadein,
   0
  )
 end

 if state.btnx_hold>0 then
  rectfill(
   34,61,95,67,0
  )
  color(c_brown)
  cprint("hold ❎ to exit",62)
 end
end

function switch_viewmode(delta)
 local skip_combined=(
  state.history:num_empty()
  ==#state.gols-1
 )
 local continue=true
 while continue do
  state.viewmode=(
   state.viewmode+delta+6
  )%6

  continue=(
   state.viewmode%5!=0
   and state.history:num_cells(
    state.viewmode
   )==0
  ) or (
   skip_combined and
   state.viewmode==5
  )
 end
end

function main_update()
 if btnp(⬆️) then
  if state.wait>0 then
   state.wait-=1
  end
 end
 if btnp(⬇️) then
  if state.wait<max_wait then
   state.wait+=1
  end
 end
 if btnp(⬅️) then
  switch_viewmode(-1)
 end
 if btnp(➡️) then
  switch_viewmode(1)
 end
 if btnp(🅾️) then
  if state.revive_wait==0 then
   --sfx(5)
   revive(state.gols)
   state.revive_wait=min_revive_delay
   state.flash_bg=8
   state.num_revives+=1>>16
   state.history:count()
   return
  end
 end
 if btn(❎) then
  if state.fadein==0 then
   state.btnx_hold+=1
   if state.btnx_hold>=30 then
    gameover(true)
    return
   end
  end
 else
  state.btnx_hold=0
 end

 if state.fadein>0 then
  state.fadein-=1
 end
 if state.flash_bg>0 then
  state.flash_bg-=1
 end

 state.t+=1
 if state.t%(1<<state.wait)!=0 then
  return
 end

 local idx=
  (state.steps<<16)%history_len
 local total_cells=0
 for i,g in pairs(state.gols) do
  local ncells=
   state.history:num_cells(i)
  if ncells>0 then
   g:step()
   state.liveliness_checks[i]
    :update(ncells)
   state.decays[i]:update(
    state.gols
   )
   state.mutators[i]:update(
    state.gols
   )
  end
 end

 state.steps+=1>>16
 state.biomass_sum+=total_cells>>16

 if state.history:count()==0 then
  gameover()
 end

 if state.revive_wait>0 then
  state.revive_wait-=1
 end
end

function gameover(
 ignore_loscore
)
 reset_garden()

 local score=state.steps
 local improved_lo=false
 if not ignore_loscore then
  if score<state.loscore then
   state.loscore=score
   dset(3,score)
   improved_lo=true
  end
 end

 local autoplay=max(
  state.num_revives,1
 )
 local improved_hi=false
 if score>state.hiscore[autoplay] then
  state.hiscore[autoplay]=score
  dset(1+autoplay,score)
  improved_hi=true
 end
 printh(
  "score="..score..
  "/"..u32_tostr(score)..
  ", hiscore="..state.hiscore[autoplay]..
  "/"..u32_tostr(state.hiscore[autoplay])
 )
 state.autoplay=900

 if improved_hi and
    show_hiscore()
 then
  music(0)
 elseif improved_lo and
        show_loscore()
 then
  music(2)
 else
  sfx(5)
 end

 _draw=gameover_draw
 _update=gameover_update
end

function gameover_draw()
 cls()
 draw_garden()
 draw_border()

 rectfill(23,32,103,95,0)

 spr(8,52,38,4,2)
 local x=0
 for i=1,2 do
  state.flowers[i]
  :draw(35+x*44,38)
  x+=1
 end

 color(c_brown)
 local y=59
 local autoplay=max(
  state.num_revives,1
 )
 local score=state.steps

 if not autoplay then
  rprint("num revives",70,y)
  rprint(
   u32_tostr(state.num_revives),
   102,y
  )
  y+=6
 end

 rprint("avg biomass",70,y)
 rprint(
  u32_tostr(
   (state.biomass_sum/
    state.steps
   )>>16
  ),
  102,y
 )
 y+=6

 rprint("score",70,y)
 rprint(u32_tostr(score),102,y)
 y+=10

 if show_loscore() then
  color(
   state.loscore==score
   and c_red or c_dgray
  )
  rprint("lo-score",70,y)
  rprint(
   u32_tostr(state.loscore),
   102,y
  )
  y+=6
 end
 if show_hiscore() then
  color(
   state.hiscore[autoplay]==score
   and c_dgreen or c_dgray
  )
  rprint("hi-score",70,y)
  rprint(u32_tostr(
    state.hiscore[autoplay]
   ),
   102,y
  )
 end
end

function gameover_update()
 if state.ini_steps>0 then
  state.ini_steps-=1
  if state.ini_steps%1==0 then
   for ca in all(state.gols) do
    ca:step()
   end
  end
 end

 foreach(
  state.flowers,
  flower.update
 )

 state.autoplay-=1
 if
  state.autoplay==0 or
  state.ini_steps==0 and (
   btnp(❎) or btnp(🅾️)
  )
 then
  start_game()
 end
end

function show_title()
 reset_garden()

 state.autoplay=900

 _draw=title_draw
 _update=title_update
end

function title_draw()
 cls()
 draw_garden()
 draw_border()

 rectfill(23,31,103,95,0)

 spr(3,46,51,5,2)
 color(c_dgray)
 --cprint("pico garden",60)
 cprint("by eriban",71)

 local x=0
 local y=0
 for i=1,14 do
  state.flowers[i]:draw(
   24+x*16,32+y*16
  )
  if x==4 then
   x=0
   y+=1
  elseif y%3==0 then
   x+=1
  else
   x=4
  end
 end
end

title_update=gameover_update

-->8
function show_label()
 _draw=label_draw
 _update=label_update
end

function label_update()
 foreach(
  state.flowers,
  flower.update
 )
end

function label_draw()
 --low-rez
 poke(0x5f2c,3)

 cls()

 local x=0
 local y=0
 for i=1,12 do
  state.flowers[i]:draw(
   x*16,y*16
  )
  if x==3 then
   x=0
   y+=1
  elseif y%3==0 then
   x+=1
  else
   x=3
  end
 end

 spr(3,14,20,5,2)

 color(c_dgray)
 print("by eriban",14,42)
end
__gfx__
00000000000000000000000000000004444004400444000444000000000000000888000080008888880008880000000000000000000000000000000000000000
00000000000000000000000000000004404404404404404404400000000000008800800808008808088088888000000000000000000000000000000000000000
007007000000e0000000000000000004404400004404404404400000000000008800000808008808088088000000000000000000000000000000000000000000
000770000000d0000000000000000004404404404400004404400000000000008808808888808808088088880000000000000000000000000000000000000000
000770000040f0c00000000000000004444004404404404404400000000000008808808808808808088088000000000000000000000000000000000000000000
00700700005090a00000000000000004400004404404404404400000000000008800808808808808088088888000000000000000000000000000000000000000
00000000002030b00000000000000004400004400444000444000000000000000888008808808808088008880000000000000000000000000000000000000000
00000000001060807000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000004440000400044440044440004440044440000000088800880880088800888800000000000000000000000000000000000000000
00000000000000000000000044004004040044044044044044444044444000000880880880880888880880880000000000000000000000000000000000000000
0000000012000e012400800044000004040044044044044044000044044000000880880880880880000880880000000000000000000000000000000000000000
00000000104003012050c00044044044444044440044044044440044044000000880880880880888800888800000000000000000000000000000000000000000
00000000024009010450b00044044044044044044044044044000044044000000880880080800880000880880000000000000000000000000000000000000000
0000000010050d002450a00044004044044044044044044044444044044000000880880080800888880880880000000000000000000000000000000000000000
00000000020506000000000004440044044044044044440004440044044000000088800008000088800880880000000000000000000000000000000000000000
0000000000450f012450700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000077700000000000000700000000
00000000000000000000000000000000000000000000000000000007000000000000007770000000000000777000000000000000000000000000000000000000
00000000000000000000000700000000000000777000000000000077700000000000070007000000000007070700000000000707070000000000070707000000
00000077700000000000007770000000000007000700000000000777770000000000070007000000000007000700000000000770770000000000077777000000
00000700070000000000077777000000000070000070000000007000007000000007700000770000000770000077000000077000007700000007707770770000
00007000007000000000770007700000000700070007000000077007007700000070000700007000007000070000700007007007007007000000770707700000
00007000007000000007770007770000000700707007000000777070707770000070007070007000077700707007770007070070700707007707777077770770
00007000007000000000770007700000000700070007000000077007007700000070000700007000007000070000700007007007007007000000770707700000
00000700070000000000077777000000000070000070000000007000007000000007700000770000000770000077000000077000007700000007707770770000
00000077700000000000007770000000000007000700000000000777770000000000070007000000000007000700000000000770770000000000077777000000
00000000000000000000000700000000000000777000000000000077700000000000070007000000000007070700000000000707070000000000070707000000
00000000000000000000000000000000000000000000000000000007000000000000007770000000000000777000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000077700000000000000700000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070700000000000007770000000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000707070000000000007770000000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000070000077000000077000007700000007700000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000700000077000000077000070070000070070000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000070000077000000077000007700000007700000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000707070000000000007770000000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000070700000000000007770000000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000
00000000000044444400000000000000000000000000444444000000000000000000000000001111110000000000000000000000000000550000000000000000
00000000000044444400000000000000000000000000444444000000000000000000000000001111110000000000000000000000000000550000000000000000
00000000000055005500000000000000000000000000555555000000000000000000000000000044000000000000000000000000000055555500000000000000
00000000000055005500000000000000000000000000555555000000000000000000000000000044000000000000000000000000000055555500000000000000
00000000004400110044000000000000000000000055222222550000000000000000000000114411441100000000000000000000005500550055000000000000
00000000004400110044000000000000000000000055222222550000000000000000000000114411441100000000000000000000005500550055000000000000
00000000004411111144000000000000000000000055222222550000000000000000000000111144111100000000000000000000005511111155000000000000
00000000004411111144000000000000000000000055222222550000000000000000000000111144111100000000000000000000005511111155000000000000
00000044441111111111444400000000000000555500000000005555000000000000001111002222220011110000000000000055551100000011555500000000
00000044441111111111444400000000000000555500000000005555000000000000001111002222220011110000000000000055551100000011555500000000
00445500111100440011110055440000004455222200005500002222554400000011004411220011002211440011000000005500110000550000110055000000
00445500111100440011110055440000004455222200005500002222554400000011004411220011002211440011000000005500110000550000110055000000
00440011111144004411111100440000004455222200550055002222554400002211441144221100112244114411220000555555110055005500115555550000
00440011111144004411111100440000004455222200550055002222554400002211441144221100112244114411220000555555110055005500115555550000
00445500111100440011110055440000004455222200005500002222554400000011004411220011002211440011000000005500110000550000110055000000
00445500111100440011110055440000004455222200005500002222554400000011004411220011002211440011000000005500110000550000110055000000
00000044441111111111444400000000000000555500000000005555000000000000001111002222220011110000000000000055551100000011555500000000
00000044441111111111444400000000000000555500000000005555000000000000001111002222220011110000000000000055551100000011555500000000
00000000004411111144000000000000000000000055222222550000000000000000000000111144111100000000000000000000005511111155000000000000
00000000004411111144000000000000000000000055222222550000000000000000000000111144111100000000000000000000005511111155000000000000
00000000004400110044000000000000000000000055222222550000000000000000000000114411441100000000000000000000005500550055000000000000
00000000004400110044000000000000000000000055222222550000000000000000000000114411441100000000000000000000005500550055000000000000
00000000000055005500000000000000000000000000555555000000000000000000000000000044000000000000000000000000000055555500000000000000
00000000000055005500000000000000000000000000555555000000000000000000000000000044000000000000000000000000000055555500000000000000
00000000000044444400000000000000000000000000444444000000000000000000000000001111110000000000000000000000000000550000000000000000
00000000000044444400000000000000000000000000444444000000000000000000000000001111110000000000000000000000000000550000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000
00000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000
00000000000022222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000022222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000004400440044000000000000000000000000000000000000000000000000000000000000000000000000000000000000001144114411000000000000
00000000004400440044000000000000000000000000000000000000000000000000000000000000000000000000000000000000001144114411000000000000
00000000004455555544000000000000000000000033333333000033330000333333000000333333000000000000000000000000001111551111000000000000
00000000004455555544000000000000000000000033333333000033330000333333000000333333000000000000000000000000001111551111000000000000
00000044445500000055444400000000000000000033330033330033330033330033330033330033330000000000000000000011115500000055111100000000
00000044445500000055444400000000000000000033330033330033330033330033330033330033330000000000000000000011115500000055111100000000
00442200550000440000550022440000000000000033330033330000000033330033330033330033330000000000000000110044110000110000114400110000
00442200550000440000550022440000000000000033330033330000000033330033330033330033330000000000000000110044110000110000114400110000
00442244550044004400554422440000000000000033330033330033330033330000000033330033330000000000000000110011550011001100551100110000
00442244550044004400554422440000000000000033330033330033330033330000000033330033330000000000000000110011550011001100551100110000
00442200550000440000550022440000000000000033333333000033330033330033330033330033330000000000000000110044110000110000114400110000
00442200550000440000550022440000000000000033333333000033330033330033330033330033330000000000000000110044110000110000114400110000
00000044445500000055444400000000000000000033330000000033330033330033330033330033330000000000000000000011115500000055111100000000
00000044445500000055444400000000000000000033330000000033330033330033330033330033330000000000000000000011115500000055111100000000
00000000004455555544000000000000000000000033330000000033330000333333000000333333000000000000000000000000001111551111000000000000
00000000004455555544000000000000000000000033330000000033330000333333000000333333000000000000000000000000001111551111000000000000
00000000004400440044000000000000000000000000000000000000000000000000000000000000000000000000000000000000001144114411000000000000
00000000004400440044000000000000000000000000000000000000000000000000000000000000000000000000000000000000001144114411000000000000
00000000000022222200000000000033333300000000330000003333333300003333333300000033333300003333333300000000000000000000000000000000
00000000000022222200000000000033333300000000330000003333333300003333333300000033333300003333333300000000000000000000000000000000
00000000000044444400000000003333000033000033003300003333003333003333003333003333333333003333333333000000000011111100000000000000
00000000000044444400000000003333000033000033003300003333003333003333003333003333333333003333333333000000000011111100000000000000
00000000000000000000000000003333000000000033003300003333003333003333003333003333000000003333003333000000000000000000000000000000
00000000000000000000000000003333000000000033003300003333003333003333003333003333000000003333003333000000000000000000000000000000
00000000000000000000000000003333003333003333333333003333333300003333003333003333333300003333003333000000000000000000000000000000
00000000000000000000000000003333003333003333333333003333333300003333003333003333333300003333003333000000000000000000000000000000
00000000000000000000000000003333003333003333003333003333003333003333003333003333000000003333003333000000000000000000000000000000
00000000000000000000000000003333003333003333003333003333003333003333003333003333000000003333003333000000000000000000000000000000
00000000000011221100000000003333000033003333003333003333003333003333003333003333333333003333003333000000000000110000000000000000
00000000000011221100000000003333000033003333003333003333003333003333003333003333333333003333003333000000000000110000000000000000
00000000000022442200000000000033333300003333003333003333003333003333333300000033333300003333003333000000000011221100000000000000
00000000000022442200000000000033333300003333003333003333003333003333333300000033333300003333003333000000000011221100000000000000
00000000004422112244000000000000000000000000000000000000000000000000000000000000000000000000000000000000002211441122000000000000
00000000004422112244000000000000000000000000000000000000000000000000000000000000000000000000000000000000002211441122000000000000
00000000004411221144000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200110022000000000000
00000000004411221144000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200110022000000000000
00000044440000000000444400000000000000000000000000000000000000000000000000000000000000000000000000000022220000000000222200000000
00000044440000000000444400000000000000000000000000000000000000000000000000000000000000000000000000000022220000000000222200000000
00112222110000440000112222110000000000000000000000000000000000000000000000000000000000000000000000001111000000220000001111000000
00112222110000440000112222110000000000000000000000000000000000000000000000000000000000000000000000001111000000220000001111000000
00224411220044004400221144220000000000000000000000000000000000000000000000000000000000000000000000112244110022002200114422110000
00224411220044004400221144220000000000000000000000000000000000000000000000000000000000000000000000112244110022002200114422110000
00112222110000440000112222110000000000000000000000000000000000000000000000000000000000000000000000001111000000220000001111000000
00112222110000440000112222110000000000000000000000000000000000000000000000000000000000000000000000001111000000220000001111000000
00000044440000000000444400000000000000000000000000000000000000000000000000000000000000000000000000000022220000000000222200000000
00000044440000000000444400000000000000000000000000000000000000000000000000000000000000000000000000000022220000000000222200000000
00000000004411221144000000001111110011001100000000001111110011111100111111001111110011111100111100000000002200110022000000000000
00000000004411221144000000001111110011001100000000001111110011111100111111001111110011111100111100000000002200110022000000000000
00000000004422112244000000001100110011001100000000001100000011001100001100001100110011001100110011000000002211441122000000000000
00000000004422112244000000001100110011001100000000001100000011001100001100001100110011001100110011000000002211441122000000000000
00000000000022442200000000001111000011111100000000001111000011110000001100001111000011111100110011000000000011221100000000000000
00000000000022442200000000001111000011111100000000001111000011110000001100001111000011111100110011000000000011221100000000000000
00000000000011221100000000001100110000001100000000001100000011001100001100001100110011001100110011000000000000110000000000000000
00000000000011221100000000001100110000001100000000001100000011001100001100001100110011001100110011000000000000110000000000000000
00000000000000000000000000001111110011111100000000001111110011001100111111001111110011001100110011000000000000000000000000000000
00000000000000000000000000001111110011111100000000001111110011001100111111001111110011001100110011000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000110000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000110000000000000000
00000000000000000000000000000000000000000000444444000000000000000000000000000011000000000000000000000000000055115500000000000000
00000000000000000000000000000000000000000000444444000000000000000000000000000011000000000000000000000000000055115500000000000000
00000000000011111100000000000000000000000000111111000000000000000000000000002244220000000000000000000000000022002200000000000000
00000000000011111100000000000000000000000000111111000000000000000000000000002244220000000000000000000000000022002200000000000000
00000000001155555511000000000000000000000044114411440000000000000000000000114411441100000000000000000000001122112211000000000000
00000000001155555511000000000000000000000044114411440000000000000000000000114411441100000000000000000000001122112211000000000000
00000000005500000055000000000000000000000044442244440000000000000000000000111111111100000000000000000000001111111111000000000000
00000000005500000055000000000000000000000044442244440000000000000000000000111111111100000000000000000000001111111111000000000000
00000011550000000000551100000000000000444400000000004444000000000000001111001111110011110000000000000011110011111100111100000000
00000011550000000000551100000000000000444400000000004444000000000000001111001111110011110000000000000011110011111100111100000000
00001155000000550000005511000000004411114400004400004411114400000000224411110011001111442200000000552222111100110011112222550000
00001155000000550000005511000000004411114400004400004411114400000000224411110011001111442200000000552222111100110011112222550000
00001155000055005500005511000000004411442200440044002244114400001111441111111100111111114411110011110011111111001111111100111100
00001155000055005500005511000000004411442200440044002244114400001111441111111100111111114411110011110011111111001111111100111100
00001155000000550000005511000000004411114400004400004411114400000000224411110011001111442200000000552222111100110011112222550000
00001155000000550000005511000000004411114400004400004411114400000000224411110011001111442200000000552222111100110011112222550000
00000011550000000000551100000000000000444400000000004444000000000000001111001111110011110000000000000011110011111100111100000000
00000011550000000000551100000000000000444400000000004444000000000000001111001111110011110000000000000011110011111100111100000000
00000000005500000055000000000000000000000044442244440000000000000000000000111111111100000000000000000000001111111111000000000000
00000000005500000055000000000000000000000044442244440000000000000000000000111111111100000000000000000000001111111111000000000000
00000000001155555511000000000000000000000044114411440000000000000000000000114411441100000000000000000000001122112211000000000000
00000000001155555511000000000000000000000044114411440000000000000000000000114411441100000000000000000000001122112211000000000000
00000000000011111100000000000000000000000000111111000000000000000000000000002244220000000000000000000000000022002200000000000000
00000000000011111100000000000000000000000000111111000000000000000000000000002244220000000000000000000000000022002200000000000000
00000000000000000000000000000000000000000000444444000000000000000000000000000011000000000000000000000000000055115500000000000000
00000000000000000000000000000000000000000000444444000000000000000000000000000011000000000000000000000000000055115500000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000110000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000110000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__sfx__
010100001806011060060600600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010100001406017060190601c06022060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010100001c06021060240602706028060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010100001d160211602316027160291602a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01010000197601d760227602576025760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01180800217601f7501c7401c7311c7211c7110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011408001d03021040240522405224042240321800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011408001d0301c040180521805218042180320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 05424344
04 06424344
00 05424344
04 07424344

